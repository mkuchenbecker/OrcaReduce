// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mkuchenbecker/orcareduce/orcareduce (interfaces: Reactor,Logger,Handler,Precondition,ID,Director,ActorDataSink,Injector,ErrorInjector,LatencyInjector)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	orcareduce "github.com/mkuchenbecker/orcareduce/orcareduce"
	reflect "reflect"
)

// MockReactor is a mock of Reactor interface
type MockReactor struct {
	ctrl     *gomock.Controller
	recorder *MockReactorMockRecorder
}

// MockReactorMockRecorder is the mock recorder for MockReactor
type MockReactorMockRecorder struct {
	mock *MockReactor
}

// NewMockReactor creates a new mock instance
func NewMockReactor(ctrl *gomock.Controller) *MockReactor {
	mock := &MockReactor{ctrl: ctrl}
	mock.recorder = &MockReactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReactor) EXPECT() *MockReactorMockRecorder {
	return m.recorder
}

// Act mocks base method
func (m *MockReactor) Act() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Act")
	ret0, _ := ret[0].(error)
	return ret0
}

// Act indicates an expected call of Act
func (mr *MockReactorMockRecorder) Act() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Act", reflect.TypeOf((*MockReactor)(nil).Act))
}

// ID mocks base method
func (m *MockReactor) ID() orcareduce.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(orcareduce.ID)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockReactorMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockReactor)(nil).ID))
}

// Notify mocks base method
func (m *MockReactor) Notify() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify")
}

// Notify indicates an expected call of Notify
func (mr *MockReactorMockRecorder) Notify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockReactor)(nil).Notify))
}

// Preconditions mocks base method
func (m *MockReactor) Preconditions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preconditions")
	ret0, _ := ret[0].(error)
	return ret0
}

// Preconditions indicates an expected call of Preconditions
func (mr *MockReactorMockRecorder) Preconditions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preconditions", reflect.TypeOf((*MockReactor)(nil).Preconditions))
}

// SignalSuccess mocks base method
func (m *MockReactor) SignalSuccess() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalSuccess")
	ret0, _ := ret[0].(error)
	return ret0
}

// SignalSuccess indicates an expected call of SignalSuccess
func (mr *MockReactorMockRecorder) SignalSuccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalSuccess", reflect.TypeOf((*MockReactor)(nil).SignalSuccess))
}

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockLogger) Error(arg0 error, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0, arg1)
}

// Error indicates an expected call of Error
func (mr *MockLoggerMockRecorder) Error(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), arg0, arg1)
}

// Errorf mocks base method
func (m *MockLogger) Errorf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf
func (mr *MockLoggerMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Infof mocks base method
func (m *MockLogger) Infof(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof
func (mr *MockLoggerMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandleError mocks base method
func (m *MockHandler) HandleError(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleError indicates an expected call of HandleError
func (mr *MockHandlerMockRecorder) HandleError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockHandler)(nil).HandleError), arg0)
}

// HandlePanic mocks base method
func (m *MockHandler) HandlePanic(arg0 *error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePanic", arg0)
}

// HandlePanic indicates an expected call of HandlePanic
func (mr *MockHandlerMockRecorder) HandlePanic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePanic", reflect.TypeOf((*MockHandler)(nil).HandlePanic), arg0)
}

// RunAsync mocks base method
func (m *MockHandler) RunAsync(arg0 orcareduce.RunFunc) orcareduce.SyncFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAsync", arg0)
	ret0, _ := ret[0].(orcareduce.SyncFunc)
	return ret0
}

// RunAsync indicates an expected call of RunAsync
func (mr *MockHandlerMockRecorder) RunAsync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAsync", reflect.TypeOf((*MockHandler)(nil).RunAsync), arg0)
}

// MockPrecondition is a mock of Precondition interface
type MockPrecondition struct {
	ctrl     *gomock.Controller
	recorder *MockPreconditionMockRecorder
}

// MockPreconditionMockRecorder is the mock recorder for MockPrecondition
type MockPreconditionMockRecorder struct {
	mock *MockPrecondition
}

// NewMockPrecondition creates a new mock instance
func NewMockPrecondition(ctrl *gomock.Controller) *MockPrecondition {
	mock := &MockPrecondition{ctrl: ctrl}
	mock.recorder = &MockPreconditionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrecondition) EXPECT() *MockPreconditionMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockPrecondition) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockPreconditionMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockPrecondition)(nil).Check))
}

// MockID is a mock of ID interface
type MockID struct {
	ctrl     *gomock.Controller
	recorder *MockIDMockRecorder
}

// MockIDMockRecorder is the mock recorder for MockID
type MockIDMockRecorder struct {
	mock *MockID
}

// NewMockID creates a new mock instance
func NewMockID(ctrl *gomock.Controller) *MockID {
	mock := &MockID{ctrl: ctrl}
	mock.recorder = &MockIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockID) EXPECT() *MockIDMockRecorder {
	return m.recorder
}

// Lineage mocks base method
func (m *MockID) Lineage() []orcareduce.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lineage")
	ret0, _ := ret[0].([]orcareduce.ID)
	return ret0
}

// Lineage indicates an expected call of Lineage
func (mr *MockIDMockRecorder) Lineage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lineage", reflect.TypeOf((*MockID)(nil).Lineage))
}

// NewChild mocks base method
func (m *MockID) NewChild() orcareduce.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChild")
	ret0, _ := ret[0].(orcareduce.ID)
	return ret0
}

// NewChild indicates an expected call of NewChild
func (mr *MockIDMockRecorder) NewChild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChild", reflect.TypeOf((*MockID)(nil).NewChild))
}

// NewScopedChild mocks base method
func (m *MockID) NewScopedChild(arg0 orcareduce.Scope) orcareduce.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewScopedChild", arg0)
	ret0, _ := ret[0].(orcareduce.ID)
	return ret0
}

// NewScopedChild indicates an expected call of NewScopedChild
func (mr *MockIDMockRecorder) NewScopedChild(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewScopedChild", reflect.TypeOf((*MockID)(nil).NewScopedChild), arg0)
}

// Parent mocks base method
func (m *MockID) Parent() orcareduce.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(orcareduce.ID)
	return ret0
}

// Parent indicates an expected call of Parent
func (mr *MockIDMockRecorder) Parent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockID)(nil).Parent))
}

// String mocks base method
func (m *MockID) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockIDMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockID)(nil).String))
}

// Value mocks base method
func (m *MockID) Value() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockIDMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockID)(nil).Value))
}

// MockDirector is a mock of Director interface
type MockDirector struct {
	ctrl     *gomock.Controller
	recorder *MockDirectorMockRecorder
}

// MockDirectorMockRecorder is the mock recorder for MockDirector
type MockDirectorMockRecorder struct {
	mock *MockDirector
}

// NewMockDirector creates a new mock instance
func NewMockDirector(ctrl *gomock.Controller) *MockDirector {
	mock := &MockDirector{ctrl: ctrl}
	mock.recorder = &MockDirectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirector) EXPECT() *MockDirectorMockRecorder {
	return m.recorder
}

// Act mocks base method
func (m *MockDirector) Act() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Act")
	ret0, _ := ret[0].(error)
	return ret0
}

// Act indicates an expected call of Act
func (mr *MockDirectorMockRecorder) Act() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Act", reflect.TypeOf((*MockDirector)(nil).Act))
}

// GetNextActor mocks base method
func (m *MockDirector) GetNextActor() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextActor")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNextActor indicates an expected call of GetNextActor
func (mr *MockDirectorMockRecorder) GetNextActor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextActor", reflect.TypeOf((*MockDirector)(nil).GetNextActor))
}

// ID mocks base method
func (m *MockDirector) ID() orcareduce.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(orcareduce.ID)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockDirectorMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDirector)(nil).ID))
}

// MockActorDataSink is a mock of ActorDataSink interface
type MockActorDataSink struct {
	ctrl     *gomock.Controller
	recorder *MockActorDataSinkMockRecorder
}

// MockActorDataSinkMockRecorder is the mock recorder for MockActorDataSink
type MockActorDataSinkMockRecorder struct {
	mock *MockActorDataSink
}

// NewMockActorDataSink creates a new mock instance
func NewMockActorDataSink(ctrl *gomock.Controller) *MockActorDataSink {
	mock := &MockActorDataSink{ctrl: ctrl}
	mock.recorder = &MockActorDataSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActorDataSink) EXPECT() *MockActorDataSinkMockRecorder {
	return m.recorder
}

// Attempt mocks base method
func (m *MockActorDataSink) Attempt(arg0 orcareduce.Reactor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attempt", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attempt indicates an expected call of Attempt
func (mr *MockActorDataSinkMockRecorder) Attempt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attempt", reflect.TypeOf((*MockActorDataSink)(nil).Attempt), arg0)
}

// Failure mocks base method
func (m *MockActorDataSink) Failure(arg0 orcareduce.Reactor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Failure", arg0)
}

// Failure indicates an expected call of Failure
func (mr *MockActorDataSinkMockRecorder) Failure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failure", reflect.TypeOf((*MockActorDataSink)(nil).Failure), arg0)
}

// Success mocks base method
func (m *MockActorDataSink) Success(arg0 orcareduce.Reactor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Success", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Success indicates an expected call of Success
func (mr *MockActorDataSinkMockRecorder) Success(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockActorDataSink)(nil).Success), arg0)
}

// MockInjector is a mock of Injector interface
type MockInjector struct {
	ctrl     *gomock.Controller
	recorder *MockInjectorMockRecorder
}

// MockInjectorMockRecorder is the mock recorder for MockInjector
type MockInjectorMockRecorder struct {
	mock *MockInjector
}

// NewMockInjector creates a new mock instance
func NewMockInjector(ctrl *gomock.Controller) *MockInjector {
	mock := &MockInjector{ctrl: ctrl}
	mock.recorder = &MockInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInjector) EXPECT() *MockInjectorMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockInjector) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockInjectorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockInjector)(nil).Error))
}

// Latency mocks base method
func (m *MockInjector) Latency() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Latency")
}

// Latency indicates an expected call of Latency
func (mr *MockInjectorMockRecorder) Latency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latency", reflect.TypeOf((*MockInjector)(nil).Latency))
}

// MockErrorInjector is a mock of ErrorInjector interface
type MockErrorInjector struct {
	ctrl     *gomock.Controller
	recorder *MockErrorInjectorMockRecorder
}

// MockErrorInjectorMockRecorder is the mock recorder for MockErrorInjector
type MockErrorInjectorMockRecorder struct {
	mock *MockErrorInjector
}

// NewMockErrorInjector creates a new mock instance
func NewMockErrorInjector(ctrl *gomock.Controller) *MockErrorInjector {
	mock := &MockErrorInjector{ctrl: ctrl}
	mock.recorder = &MockErrorInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorInjector) EXPECT() *MockErrorInjectorMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockErrorInjector) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockErrorInjectorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockErrorInjector)(nil).Error))
}

// MockLatencyInjector is a mock of LatencyInjector interface
type MockLatencyInjector struct {
	ctrl     *gomock.Controller
	recorder *MockLatencyInjectorMockRecorder
}

// MockLatencyInjectorMockRecorder is the mock recorder for MockLatencyInjector
type MockLatencyInjectorMockRecorder struct {
	mock *MockLatencyInjector
}

// NewMockLatencyInjector creates a new mock instance
func NewMockLatencyInjector(ctrl *gomock.Controller) *MockLatencyInjector {
	mock := &MockLatencyInjector{ctrl: ctrl}
	mock.recorder = &MockLatencyInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLatencyInjector) EXPECT() *MockLatencyInjectorMockRecorder {
	return m.recorder
}

// Latency mocks base method
func (m *MockLatencyInjector) Latency() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Latency")
}

// Latency indicates an expected call of Latency
func (mr *MockLatencyInjectorMockRecorder) Latency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latency", reflect.TypeOf((*MockLatencyInjector)(nil).Latency))
}
